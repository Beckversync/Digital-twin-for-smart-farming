import os
import time
import json
import random
import argparse
import atexit
import logging
from threading import Event
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from confluent_kafka import Producer, KafkaException

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh Kafka cho Farm 2
KAFKA_BOOTSTRAP_SERVERS = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "localhost:39092")
KAFKA_TOPIC = os.getenv("KAFKA_TOPIC_FARM2", "sensor_data_farm2")

if not KAFKA_BOOTSTRAP_SERVERS:
    logger.error("‚ùå KAFKA_BOOTSTRAP_SERVERS kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh!")
    exit(1)

# C·∫•u h√¨nh Kafka Producer
PRODUCER_CONFIG = {
    'bootstrap.servers': KAFKA_BOOTSTRAP_SERVERS,
    'compression.type': 'snappy',
    'linger.ms': 10,      # T·ªëi ∆∞u hi·ªáu su·∫•t g·ª≠i
    'batch.size': 65536,   # C·∫£i thi·ªán th√¥ng l∆∞·ª£ng
}


def create_producer():
    """
    T·∫°o v√† tr·∫£ v·ªÅ Kafka Producer.
    """
    try:
        return Producer(PRODUCER_CONFIG)
    except KafkaException as e:
        logger.error(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Kafka Producer: {e}")
        exit(1)


# Kh·ªüi t·∫°o Kafka Producer to√†n c·ª•c
producer = create_producer()

# S·ª± ki·ªán b√°o hi·ªáu d·ª´ng c√°c lu·ªìng
stop_event = Event()


def close_producer():
    """
    Flush c√°c message ch·ªù v√† ƒë√≥ng Kafka Producer.
    """
    logger.info("üî¥ ƒêang ƒë√≥ng Kafka producer...")
    producer.flush(timeout=5)
    logger.info("‚úÖ Kafka producer ƒë√£ ƒë√≥ng.")


# ƒêƒÉng k√Ω h√†m ƒë√≥ng producer khi ·ª©ng d·ª•ng tho√°t
atexit.register(close_producer)


def delivery_callback(err, msg):
    """
    Callback khi g·ª≠i message t·ªõi Kafka.
    """
    if err:
        logger.warning(f"‚ö†Ô∏è L·ªói khi g·ª≠i tin: {err}")
    else:
        logger.debug(f"‚úÖ Tin g·ª≠i th√†nh c√¥ng t·ªõi {msg.topic()} [partition {msg.partition()}] offset {msg.offset()}")


def send_to_kafka(data, retries=3):
    """
    G·ª≠i d·ªØ li·ªáu ƒë·∫øn Kafka v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i khi g·∫∑p l·ªói.
    
    Args:
        data (dict): D·ªØ li·ªáu c·∫£m bi·∫øn c·∫ßn g·ª≠i.
        retries (int): S·ªë l·∫ßn th·ª≠ g·ª≠i l·∫°i khi g·∫∑p l·ªói.
    """
    message_json = json.dumps(data)
    for attempt in range(1, retries + 1):
        try:
            producer.produce(KAFKA_TOPIC, value=message_json.encode('utf-8'), callback=delivery_callback)
            producer.poll(1)  # Ch·ªù 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o tin ƒë∆∞·ª£c g·ª≠i
            return
        except KafkaException as e:
            logger.warning(f"‚ö†Ô∏è Kafka Error (l·∫ßn {attempt}/{retries}): {e}")
            if attempt < retries:
                time.sleep(2)


def read_sensor_data(sensor_id, temperature_range=(20, 30), humidity_range=(40, 60)):
    """
    M√¥ ph·ªèng vi·ªác ƒë·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn.
    
    Args:
        sensor_id (str): ID c·ªßa c·∫£m bi·∫øn.
        temperature_range (tuple): Kho·∫£ng nhi·ªát ƒë·ªô.
        humidity_range (tuple): Kho·∫£ng ƒë·ªô ·∫©m.
    
    Returns:
        dict: D·ªØ li·ªáu c·∫£m bi·∫øn bao g·ªìm nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m v√† timestamp.
    """
    return {
        "sensor_id": sensor_id,
        "temperature": round(random.uniform(*temperature_range), 2),
        "humidity": round(random.uniform(*humidity_range), 2),
        "timestamp": datetime.utcnow().isoformat() + "Z"
    }


def sensor_loop(sensor_id, temperature_range, humidity_range, interval):
    """
    V√≤ng l·∫∑p ƒë·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn v√† g·ª≠i d·ªØ li·ªáu ƒë·∫øn Kafka theo kho·∫£ng th·ªùi gian c·ªë ƒë·ªãnh.
    
    Args:
        sensor_id (str): ID c·ªßa c·∫£m bi·∫øn.
        temperature_range (tuple): Kho·∫£ng nhi·ªát ƒë·ªô.
        humidity_range (tuple): Kho·∫£ng ƒë·ªô ·∫©m.
        interval (int): Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn g·ª≠i (gi√¢y).
    """
    while not stop_event.is_set():
        data = read_sensor_data(sensor_id, temperature_range, humidity_range)
        logger.info(f"üì° ƒê·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn: {data}")
        send_to_kafka(data)
        time.sleep(interval)


def run_sensor_threads(sensors, interval):
    """
    Kh·ªüi ch·∫°y c√°c lu·ªìng ƒë·ªçc c·∫£m bi·∫øn song song.
    
    Args:
        sensors (list): Danh s√°ch c·∫•u h√¨nh c·∫£m bi·∫øn.
        interval (int): Kho·∫£ng th·ªùi gian g·ª≠i d·ªØ li·ªáu.
    """
    with ThreadPoolExecutor(max_workers=len(sensors)) as executor:
        for sensor in sensors:
            executor.submit(
                sensor_loop,
                sensor["sensor_id"],
                sensor["temperature_range"],
                sensor["humidity_range"],
                interval
            )

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("üî¥ Nh·∫≠n t√≠n hi·ªáu d·ª´ng, k·∫øt th√∫c c√°c lu·ªìng...")
            stop_event.set()
            close_producer()
            logger.info("‚úÖ ƒê√£ d·ª´ng t·∫•t c·∫£ c√°c lu·ªìng.")


def parse_arguments():
    """
    Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh.
    
    Returns:
        argparse.Namespace: C√°c tham s·ªë ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch.
    """
    parser = argparse.ArgumentParser(description="Kafka Sensor Data Producer cho Farm 2")
    parser.add_argument("--interval", type=int, default=5, help="Th·ªùi gian gi·ªØa c√°c l·∫ßn g·ª≠i (gi√¢y)")
    return parser.parse_args()


def generate_sensors(count=10):
    """
    Sinh ra danh s√°ch c·∫£m bi·∫øn v·ªõi c·∫•u h√¨nh nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m kh√°c nhau.
    
    Args:
        count (int): S·ªë l∆∞·ª£ng c·∫£m bi·∫øn c·∫ßn t·∫°o.
    
    Returns:
        list: Danh s√°ch c√°c c·∫•u h√¨nh c·∫£m bi·∫øn.
    """
    sensors = []
    for i in range(count):
        sensors.append({
            "sensor_id": f"sensor_farm2_{i + 1}",
            "temperature_range": (20 + i, 25 + i),
            "humidity_range": (40 + i, 60 + i)
        })
    return sensors


def main():
    """
    H√†m ch√≠nh kh·ªüi ch·∫°y ·ª©ng d·ª•ng.
    """
    args = parse_arguments()
    sensors = generate_sensors(count=10)
    run_sensor_threads(sensors, args.interval)


if __name__ == "__main__":
    main()

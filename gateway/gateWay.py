import os
import time
import json
import random
import argparse
from confluent_kafka import Producer, KafkaException
from datetime import datetime

# L·∫•y c·∫•u h√¨nh Kafka t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
KAFKA_BOOTSTRAP_SERVERS = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "localhost:39092")
KAFKA_TOPIC = os.getenv("KAFKA_TOPIC", "sensor_data")  # ƒê·ªìng nh·∫•t v·ªõi consumer

# C·∫•u h√¨nh producer cho Kafka
producer_conf = {
    'bootstrap.servers': KAFKA_BOOTSTRAP_SERVERS,
}
producer = Producer(producer_conf)

def delivery_callback(err, msg):
    """Callback ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ g·ª≠i tin kh√¥ng ƒë·ªìng b·ªô."""
    if err:
        print(f"‚ö†Ô∏è L·ªói khi g·ª≠i tin: {err}")
    else:
        print(f"‚úÖ Tin g·ª≠i th√†nh c√¥ng t·ªõi {msg.topic()} [partition {msg.partition()}] offset {msg.offset()}")

def send_to_kafka(data):
    """G·ª≠i d·ªØ li·ªáu JSON l√™n Kafka v·ªõi x·ª≠ l√Ω l·ªói."""
    try:
        message_json = json.dumps(data)
        producer.produce(KAFKA_TOPIC, value=message_json, callback=delivery_callback)
        producer.poll(0)
    except KafkaException as e:
        print(f"‚ö†Ô∏è Kafka Error: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi g·ª≠i l√™n Kafka: {e}")

def read_sensor_data(sensor_id, temperature_range=(20, 30), humidity_range=(40, 60)):
    """Gi·∫£ l·∫≠p d·ªØ li·ªáu c·∫£m bi·∫øn."""
    temperature = random.uniform(*temperature_range)
    humidity = random.uniform(*humidity_range)
    return {
        "sensor_id": sensor_id,
        "temperature": temperature,
        "humidity": humidity,
        "timestamp": datetime.utcnow().isoformat()
    }

def main(sensors, interval):
    """G·ª≠i d·ªØ li·ªáu li√™n t·ª•c."""
    try:
        while True:
            for sensor in sensors:
                data = read_sensor_data(
                    sensor_id=sensor["sensor_id"],
                    temperature_range=sensor.get("temperature_range", (20, 30)),
                    humidity_range=sensor.get("humidity_range", (40, 60))
                )
                print(f"üì° ƒê·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn: {data}")
                send_to_kafka(data)
            time.sleep(interval)
    except KeyboardInterrupt:
        print("üöÄ ƒêang d·ª´ng gateway, flush tin nh·∫Øn c√≤n l·∫°i...")
    finally:
        producer.flush()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Kafka Sensor Data Producer")
    parser.add_argument("--interval", type=int, default=5, help="Th·ªùi gian gi·ªØa c√°c l·∫ßn g·ª≠i (gi√¢y)")
    args = parser.parse_args()

    sensors = [
        {"sensor_id": f"sensor_{i+1}", "temperature_range": (20 + i, 25 + i), "humidity_range": (40 + i, 60 + i)}
        for i in range(10)
    ]
    main(sensors, args.interval)

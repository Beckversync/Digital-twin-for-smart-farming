import os
import json
import logging
from kafka import KafkaConsumer
from influxdb_client import InfluxDBClient, Point, WritePrecision
from concurrent.futures import ThreadPoolExecutor

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
BOOTSTRAP_SERVERS = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "localhost:39092").split(",")
TOPICS = ["sensor_data", "sensor_data_farm2"]  # L·∫Øng nghe c·∫£ hai topic
GROUP_ID = os.getenv("KAFKA_CONSUMER_GROUP", "sensor_group")

# C·∫•u h√¨nh InfluxDB
INFLUXDB_URL = os.getenv("INFLUXDB_URL", "http://localhost:8086")
INFLUXDB_TOKEN = os.getenv("INFLUXDB_TOKEN", "52OGtNGg0FWwWUr2JoeG8lPJnQL13SyvICbGF3DyVx4gE8ZzB5KwhH4RpjJzHvolO3YtnQ_DBpVqYcnlXSHlWQ==")
INFLUXDB_ORG = os.getenv("INFLUXDB_ORG", "Ho Chi Minh University of Technology")
INFLUXDB_BUCKET = os.getenv("INFLUXDB_BUCKET", "sensor_data")

# K·∫øt n·ªëi InfluxDB
influx_client = InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKEN, org=INFLUXDB_ORG)
write_api = influx_client.write_api()

# Kafka Consumer
consumer = KafkaConsumer(
    *TOPICS,
    bootstrap_servers=BOOTSTRAP_SERVERS,
    security_protocol='PLAINTEXT',
    value_deserializer=lambda x: json.loads(x.decode('utf-8')),
    auto_offset_reset='earliest',
    group_id=GROUP_ID
)

# D√πng ThreadPool ƒë·ªÉ x·ª≠ l√Ω message song song
pool = ThreadPoolExecutor(max_workers=4)
last_values = {}


def process_message(data):
    """X·ª≠ l√Ω v√† l∆∞u d·ªØ li·ªáu v√†o InfluxDB, l·ªçc d·ªØ li·ªáu kh√¥ng c·∫ßn thi·∫øt."""
    sensor_id = data["sensor_id"]

    # L·ªçc d·ªØ li·ªáu n·∫øu thay ƒë·ªïi kh√¥ng ƒë√°ng k·ªÉ
    if sensor_id in last_values and abs(last_values[sensor_id] - data["temperature"]) < 0.5:
        logger.info(f"üîÑ B·ªè qua d·ªØ li·ªáu kh√¥ng thay ƒë·ªïi ƒë√°ng k·ªÉ: {data}")
        return

    last_values[sensor_id] = data["temperature"]
    point = Point("sensor_data").tag("sensor_id", sensor_id) \
        .field("temperature", data["temperature"]) \
        .field("humidity", data["humidity"]) \
        .time(data["timestamp"])

    write_api.write(bucket=INFLUXDB_BUCKET, org=INFLUXDB_ORG, record=point)
    logger.info(f"üì• D·ªØ li·ªáu ƒë√£ l∆∞u v√†o InfluxDB: {data}")


def consume_messages():
    """Nh·∫≠n d·ªØ li·ªáu t·ª´ Kafka v√† x·ª≠ l√Ω song song."""
    logger.info(f"üì° Consumer ƒëang l·∫Øng nghe tr√™n c√°c topics: {TOPICS}...")
    try:
        for message in consumer:
            data = message.value
            pool.submit(process_message, data)  # ƒê·∫©y task v√†o thread pool
    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è Consumer d·ª´ng do ng∆∞·ªùi d√πng y√™u c·∫ßu.")
    finally:
        consumer.close()
        influx_client.close()
        logger.info("üîå Consumer ƒë√£ ƒë√≥ng k·∫øt n·ªëi.")


if __name__ == "__main__":
    consume_messages()
